/*REKURSIVE ABFRAGEN Beispiele*/
/*http://www.mayeruli.de/db2/rekursives-sql.php*/

CREATE TABLE orga(
             persnr NUMBER GENERATED BY DEFAULT AS IDENTITY,
             name VARCHAR(255) NOT NULL,
             chef_ist NUMBER
);

INSERT INTO orga (persnr, name, chef_ist) VALUES (1,'Obermotz 1',null);
INSERT INTO orga (persnr, name, chef_ist) VALUES (2,'Obermotz 2',null);
INSERT INTO orga (persnr, name, chef_ist) VALUES (3,'Obermotz 3',null);
INSERT INTO orga (persnr, name, chef_ist) VALUES (11,'Mittelmotz 11',1);
INSERT INTO orga (persnr, name, chef_ist) VALUES (12,'Mittelmotz 12',1);
INSERT INTO orga (persnr, name, chef_ist) VALUES (13,'Mittelmotz 13',1);
INSERT INTO orga (persnr, name, chef_ist) VALUES (21,'Mittelmotz 21',2);
INSERT INTO orga (persnr, name, chef_ist) VALUES (22,'Mittelmotz 22',2);
INSERT INTO orga (persnr, name, chef_ist) VALUES (23,'Mittelmotz 23',2);
INSERT INTO orga (persnr, name, chef_ist) VALUES (31,'Mittelmotz 31',3);
INSERT INTO orga (persnr, name, chef_ist) VALUES (32,'Mittelmotz 32',3);
INSERT INTO orga (persnr, name, chef_ist) VALUES (33,'Mittelmotz 33',3);
INSERT INTO orga (persnr, name, chef_ist) VALUES (111,'Untermotz 111',11);
INSERT INTO orga (persnr, name, chef_ist) VALUES (112,'Untermotz 112',11);
INSERT INTO orga (persnr, name, chef_ist) VALUES (113,'Untermotz 113',11);
INSERT INTO orga (persnr, name, chef_ist) VALUES (121,'Untermotz 121',12);
INSERT INTO orga (persnr, name, chef_ist) VALUES (122,'Untermotz 122',12);
INSERT INTO orga (persnr, name, chef_ist) VALUES (123,'Untermotz 123',12);
INSERT INTO orga (persnr, name, chef_ist) VALUES (211,'Untermotz 211',21);
INSERT INTO orga (persnr, name, chef_ist) VALUES (212,'Untermotz 212',21);
INSERT INTO orga (persnr, name, chef_ist) VALUES (213,'Untermotz 213',21);
INSERT INTO orga (persnr, name, chef_ist) VALUES (311,'Untermotz 311',31);
INSERT INTO orga (persnr, name, chef_ist) VALUES (312,'Untermotz 312',31);
INSERT INTO orga (persnr, name, chef_ist) VALUES (313,'Untermotz 313',31);
INSERT INTO orga (persnr, name, chef_ist) VALUES (321,'Untermotz 321',32);
INSERT INTO orga (persnr, name, chef_ist) VALUES (1111,'Roedldoedl 1111',111);
INSERT INTO orga (persnr, name, chef_ist) VALUES (1112,'Roedldoedl 1112',111);
INSERT INTO orga (persnr, name, chef_ist) VALUES (1113,'Roedldoedl 1113',111);
INSERT INTO orga (persnr, name, chef_ist) VALUES (1114,'Roedldoedl 1114',111);
INSERT INTO orga (persnr, name, chef_ist) VALUES (1121,'Roedldoedl 1121',112);
INSERT INTO orga (persnr, name, chef_ist) VALUES (1122,'Roedldoedl 1122',112);
INSERT INTO orga (persnr, name, chef_ist) VALUES (1211,'Roedldoedl 1211',121);
INSERT INTO orga (persnr, name, chef_ist) VALUES (1212,'Roedldoedl 1212',121);
INSERT INTO orga (persnr, name, chef_ist) VALUES (1231,'Roedldoedl 1231',123);
INSERT INTO orga (persnr, name, chef_ist) VALUES (1232,'Roedldoedl 1232',123);
INSERT INTO orga (persnr, name, chef_ist) VALUES (1311,'Roedldoedl 1311',131);
INSERT INTO orga (persnr, name, chef_ist) VALUES (1312,'Roedldoedl 1312',131);
INSERT INTO orga (persnr, name, chef_ist) VALUES (2111,'Roedldoedl 2111',211);
INSERT INTO orga (persnr, name, chef_ist) VALUES (2112,'Roedldoedl 2112',211);
INSERT INTO orga (persnr, name, chef_ist) VALUES (2113,'Roedldoedl 2113',211);
INSERT INTO orga (persnr, name, chef_ist) VALUES (3111,'Roedldoedl 3111',311);
INSERT INTO orga (persnr, name, chef_ist) VALUES (3112,'Roedldoedl 3112',311);
INSERT INTO orga (persnr, name, chef_ist) VALUES (3311,'Roedldoedl 3311',331);
INSERT INTO orga (persnr, name, chef_ist) VALUES (3211,'Roedldoedl 3211',321);

/*Klassische Fragestellung: Welche Untergebenen hat Obermotz 1?*/
/*Die Klassische Lösung mittels SELECT:*/
SELECT B.*
FROM ORGA A 
INNER JOIN ORGA B ON (A.persnr = B.chef_ist)
WHERE A.name = 'Obermotz 1';
-- Diese Abfrage gibt jedoch nur die direkten Untergebenen aus, ist daher eher unbrauchbar.
-- Nicht erfasst werden die Untergebenen der Untergebenen.

/*
Die drei Fragestellugen um eine rekursive Abfrage zu formulieren:
      1. Welche Spalten sollen in der Ergebnismenge Auftauchen und/oder werden für die Rekursionsbedingung benötigt?
         Antwort: persnr, name
      2. Wie lautet das SELECT Statement für den Satz, von dem die Rekursion ausgehen soll?
         Antwort: SELECT persnr, name
                  FROM orga 
                  WHERE chef_ist = 1;
      3. Wie lautet die Rekursionsbedingung?
         Antwort (Verbal): Wer ist Untergebener eines in der vorherigen Rekursion ermittelten Chefs. 
         Antwort (Syntax): NEUHINZUZUFÜGEN.chef_ist = NEU_ERMITTELT.persnr
*/

WITH abcde (persnr, name) AS (    -- abcde ist eine Frei vergebbarer Name, dieser sollte jedoch nicht identisch mit einer bereits existierenden Tabelle sein.
     SELECT persnr, name FROM orga
     WHERE chef_ist = 1 OR name = 'Obermotz 1'
     UNION ALL -- = concat
     SELECT A.persnr, A.name from orga A
     INNER JOIN abcde B on A.chef_ist = B.persnr )
SELECT * FROM abcde;

/*Zusätzlich kann man sich auch die jeweilige Iterationsstufe anzeigen lassen*/
WITH abcde (persnr, name, stufe) AS (
     SELECT persnr, name, 1 AS stufe FROM orga -- Setze Stufe auf 1 wenn persnr = 1 ist.
     WHERE persnr = 1
     UNION ALL 
     SELECT A.persnr, A.name, B.stufe + 1 FROM orga A -- Stufe += 1 
     INNER JOIN abcde B on A.chef_ist = B.persnr )
SELECT * FROM abcde;

/*Das Zählen der Iterationen macht Sinn um Endlosschleifen zu verhindern. 
Man kann die Limitierung auch beim Abschliessenden SELECT definieren, es ist jedoch besser
wenn diese Limitierung während der WHILE Abfrage stattfindet.*/

WITH abcde (persnr, name, stufe) AS (
     SELECT persnr, name, 1 AS stufe
     FROM orga
     WHERE persnr = 1
     UNION ALL
     SELECT A.persnr, A.name, B.stufe + 1 FROM orga A
     INNER JOIN abcde B ON B.persnr = A.chef_ist
     WHERE stufe <= 3)  -- Limitierung auf max 4. Iteration
SELECT * FROM abcde;

-- DROP TABLE orga PURGE;
